# frozen_string_literal: true
# encoding: US-ASCII

module Laser; end

class Laser::SetTopBox6000
    include ::Orchestrator::Constants


    # Discovery Information
    descriptive_name 'Laser STB-6000 + GlobalCache'
    generic_name :Receiver
    implements :logic


    def on_load
        on_update
    end

    def on_update
        self[:ir_driver] = @ir_driver = setting(:ir_driver)&.to_sym || :DigitalIO
        self[:ir_index] = @ir_index = setting(:ir_index) || 1
    end


    # Here for compatibility
    def power(state = true, **options)
        do_send('1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,1536,342,85,21,3668')
        true
    end

    DIRECTIONS = {
        left: '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,64,21,64,21,21,21,21,21,64,21,21,21,64,21,64,21,21,21,21,21,64,21,64,21,21,21,64,21,1536,342,85,21,3668',
        right: '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,1535,342,85,21,3668',
        up: '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,64,21,21,21,21,21,21,21,64,21,21,21,64,21,64,21,21,21,64,21,64,21,64,21,21,21,64,21,1535,342,85,21,3668',
        down: '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,21,21,21,21,63,21,21,21,21,21,63,21,21,21,63,21,63,21,63,21,21,21,63,21,63,21,21,21,63,21,1535,342,85,21,3668'
    }
    def cursor(direction, **options)
        val = DIRECTIONS[direction.to_sym]
        raise "invalid direction #{direction}" unless val
        do_send(val)
    end

    def num(number, **options)
        val = case number.to_i
        when 0; '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,21,21,21,21,21,21,21,21,63,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,1536,342,85,21,3668'
        when 1; '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,21,21,63,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,21,21,63,21,1536,342,85,21,3668'
        when 2; '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,21,21,64,21,21,21,21,21,21,21,64,21,21,21,64,21,64,21,21,21,64,21,1535,342,85,21,3668'
        when 3; '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,64,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,21,21,64,21,1535,342,85,21,3668'
        when 4; '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,63,21,63,21,21,21,21,21,63,21,21,21,63,21,21,21,21,21,21,21,63,21,63,21,21,21,63,21,1535,342,85,21,3668'
        when 5; '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,21,21,63,21,21,21,21,21,63,21,21,21,63,21,21,21,63,21,21,21,63,21,63,21,21,21,63,21,1536,342,85,21,3668'
        when 6; '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,64,21,21,21,21,21,21,21,64,21,21,21,64,21,21,21,21,21,64,21,64,21,64,21,21,21,64,21,1535,342,85,21,3668'
        when 7; '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,63,21,21,21,21,21,63,21,21,21,21,21,63,21,21,21,21,21,63,21,63,21,21,21,63,21,1536,342,85,21,3668'
        when 8; '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,64,21,21,21,21,21,64,21,21,21,21,21,64,21,64,21,21,21,64,21,64,21,21,21,64,21,1535,342,85,21,3668'
        when 9; '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,21,21,21,21,64,21,21,21,21,21,64,21,21,21,64,21,64,21,64,21,21,21,64,21,1535,342,85,21,3668'
        end
        do_send(val)
    end

    # Make compatible with IPTV systems
    def channel(number)
        number.to_s.each_char do |char|
            num(char)
        end
    end


    COMMANDS = {
        channel_up:      '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,63,21,21,21,63,21,21,21,21,21,21,21,63,21,21,21,21,21,63,21,21,21,63,21,1535,342,85,21,3668',
        channel_down:    '1,38000,1,69,342,171,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,21,21,63,21,63,21,63,21,21,21,21,21,21,21,63,21,63,21,21,21,21,21,21,21,63,21,63,21,63,21,1536,342,85,21,3668',
        enter:           '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,64,21,21,21,21,21,21,21,21,21,21,21,64,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,1535,342,85,21,3668',
        exit:            '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,1535,342,85,21,3668',
        favourite:       '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,64,21,21,21,21,21,21,21,21,21,21,21,64,21,21,21,21,21,64,21,64,21,64,21,64,21,1535,342,85,21,3668',
        forward:         '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,64,21,21,21,21,21,21,21,21,21,64,21,21,21,64,21,21,21,64,21,64,21,64,21,64,21,1535,342,85,21,3668',
        guide:           '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,21,21,64,21,64,21,64,21,64,21,1535,342,85,21,3668',
        info:            '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,21,21,63,21,63,21,63,21,63,21,63,21,1535,342,85,21,3668',
        list:            '1,38000,1,69,342,173,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,21,21,21,21,21,21,64,21,21,21,64,21,21,21,64,21,64,21,64,21,64,21,21,21,64,21,1536,342,85,21,3668',
        menu:            '1,38000,1,69,342,173,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,1536,342,85,21,3668',
        toggle_mute:     '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,64,21,64,21,21,21,21,21,21,21,21,21,64,21,64,21,21,21,21,21,64,21,64,21,64,21,64,21,1535,342,85,21,3668',
        pause:           '1,38000,1,69,342,171,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,21,21,63,21,21,21,63,21,21,21,63,21,21,21,63,21,63,21,21,21,63,21,21,21,63,21,21,21,63,21,1535,342,85,21,3668',
        play:            '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,21,21,64,21,21,21,64,21,21,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,64,21,1535,342,85,21,3668',
        record:          '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,64,21,21,21,64,21,21,21,21,21,64,21,64,21,64,21,21,21,64,21,21,21,64,21,1535,342,85,21,3668',
        repeat:          '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,63,21,63,21,21,21,63,21,21,21,21,21,63,21,21,21,21,21,21,21,63,21,21,21,63,21,1536,342,85,21,3668',
        replay:          '1,38000,1,69,342,171,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,21,21,63,21,21,21,63,21,21,21,21,21,21,21,63,21,63,21,21,21,63,21,21,21,63,21,63,21,63,21,1535,342,85,21,3668',
        skip:            '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,64,21,64,21,21,21,21,21,21,21,64,21,64,21,64,21,21,21,21,21,64,21,64,21,64,21,1535,342,85,21,3668',
        stop:            '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,64,21,64,21,21,21,64,21,21,21,64,21,64,21,64,21,21,21,21,21,64,21,21,21,64,21,1535,342,85,21,3668',
        select_subtiles: '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,64,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,21,21,64,21,64,21,64,21,64,21,1535,342,85,21,3668',
        toggle_text:     '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,1535,342,85,21,3668',
        toogle_tv_radio: '1,38000,1,69,342,173,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,64,21,64,21,21,21,64,21,21,21,21,21,64,21,64,21,21,21,21,21,64,21,21,21,64,21,1536,342,85,21,3668',
        zoom:            '1,38000,1,69,342,171,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,21,21,64,21,21,21,64,21,21,21,64,21,21,21,64,21,64,21,21,21,64,21,21,21,64,21,1535,342,85,21,3668',
        volume_up:       '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,21,21,63,21,21,21,21,21,21,21,21,21,63,21,21,21,63,21,21,21,63,21,1536,342,85,21,3668',
        volume_down:     '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,21,21,21,21,21,21,64,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,21,21,64,21,64,21,64,21,1535,342,85,21,3668',
        blue:            '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,63,21,63,21,63,21,21,21,63,21,21,21,63,21,21,21,21,21,21,21,21,21,63,21,21,21,63,21,1535,342,85,21,3668',
        red:             '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,21,21,21,21,63,21,21,21,63,21,21,21,63,21,21,21,63,21,63,21,21,21,63,21,21,21,63,21,1535,342,85,21,3668',
        green:           '1,38000,1,69,342,172,21,63,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,63,21,63,21,63,21,63,21,63,21,63,21,63,21,21,21,63,21,63,21,21,21,63,21,21,21,63,21,21,21,63,21,21,21,21,21,63,21,21,21,63,21,21,21,63,21,1535,342,85,21,3668',
        yellow:          '1,38000,1,69,342,172,21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,21,64,21,64,21,64,21,64,21,64,21,64,21,21,21,64,21,21,21,64,21,64,21,21,21,64,21,21,21,64,21,21,21,64,21,21,21,21,21,64,21,21,21,64,21,1535,342,85,21,3668'
    }

    # Automatically creates a callable function for each command
    COMMANDS.each do |command, value|
        define_method command do |**options|
            do_send(value)
        end
    end


    protected


    def do_send(cmd)
        system[@ir_driver].ir(@ir_index, cmd)
    end
end
